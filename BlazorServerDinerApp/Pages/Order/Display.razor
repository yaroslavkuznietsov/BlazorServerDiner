@*@page "/Order/Display" - possible second route without Id*@
@page "/Order/Display/{Id:int}"
@inject IFoodData foodData
@inject IOrderData orderData
@using BlazorServerDinerApp.Models

<h3>Display</h3>

@if (order is null)
{
    <h4>Record Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order Name</strong></td>
                <td>@order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@string.Format("{0:C}", order.Total)</td>
            </tr>
            <tr>
                <td><strong>Item Ordered</strong></td>
                <td>@itemPurchased</td>
            </tr>
            <tr>
                <td><strong>Quantity Ordered</strong></td>
                <td>@order.Quantity</td>
            </tr>
        </tbody>
    </table>
}

<EditForm Model="@orderUpdateModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@orderUpdateModel" />

    <div class="form-group">
        <label class="control-label">Name of the Order</label>
        <InputText @bind-Value="orderUpdateModel.OrderName" class="form-control" />
        <ValidationMessage For="@(() => orderUpdateModel.OrderName)" class="text-danger" />
    </div>
    <div class="form-group">
        <input type="submit" value="Update Order Name" class="btn btn-primary" />
    </div>

</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }

    private OrderModel order;
    private string itemPurchased;
    private OrderUpdateModel orderUpdateModel = new OrderUpdateModel();

    protected override async Task OnInitializedAsync()
    {
        order = await orderData.GetOrderById(Id);

        if (order != null)
        {
            var food = await foodData.GetFood();

            itemPurchased = food.Where(x => x.Id == order.FoodId).FirstOrDefault()?.Title;

            orderUpdateModel.Id = order.Id;
            orderUpdateModel.OrderName = order.OrderName;
        }
    }

    private async Task HandleValidSubmit()
    {
        await orderData.UpdateOrderName(orderUpdateModel.Id, orderUpdateModel.OrderName);
        order.OrderName = orderUpdateModel.OrderName;
    }
}
